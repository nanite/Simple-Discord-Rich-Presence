plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    }

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}


dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    modApi("me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_config_version}")

    implementation 'com.github.jagrosh:DiscordIPC:a8d6631cc9'
    forgeRuntimeLibrary 'com.github.jagrosh:DiscordIPC:a8d6631cc9'

    include(implementation 'com.github.jagrosh:DiscordIPC:a8d6631cc9')
    include(implementation "com.kohlschutter.junixsocket:junixsocket-common:2.6.2")
    include(implementation "com.kohlschutter.junixsocket:junixsocket-native-common:2.6.2")
    include(implementation "org.json:json:20210307")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

//    modImplementation "dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}"
//    modImplementation "dev.latvian.mods:rhino-forge:${rootProject.rhino_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    setArchiveClassifier("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
    setArchiveClassifier(null)
}

jar {
    setArchiveClassifier("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def ENV = System.getenv()

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }
}
