plugins {
    id "architectury-plugin" version "3.4.151"
    id "dev.architectury.loom" version "1.4.373" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    def ENV = System.getenv()

    archivesBaseName = rootProject.archives_base_name
    version = "${mod_version}-build.${ENV.GITHUB_RUN_NUMBER ?: 9999}+mc${minecraft_version}"
    group = rootProject.maven_group

    repositories {
        maven {
            url "https://maven.latvian.dev/releases"
            content {
                includeGroup "dev.latvian.mods"
            }
        }
        maven {
            url "https://maven.saps.dev/releases"
            content {
                includeGroup "dev.ftb.mods"
                includeGroup "dev.latvian.mods"
            }
        }
        maven { url "https://maven.saps.dev/mirror" }
        maven { url 'https://jitpack.io'
            content {
                includeGroup "com.github.jagrosh"
            }
        }
        maven {
            url "https://maven.blamejared.com"
            content {
                includeGroup "com.faux.ingredientextension"
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }

    publishing {
        repositories {
            if (ENV.NANITE_TOKEN) {
                maven {
                    url "https://maven.nanite.dev/releases"
                    credentials {
                        username = "nanite"
                        password = "${ENV.NANITE_TOKEN}"
                    }
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    def fabricOptions = publishOptions {
        file = project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "[FABRIC][${minecraft_version}] ${project.name} ${mod_version}"
        modLoaders.add("fabric")
    }

    def forgeOptions = publishOptions {
        file = project.provider { project(":forge").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "[FORGE][${minecraft_version}] ${project.name} ${mod_version}"
        modLoaders.add("forge")
    }

    def neoforgeOptions = publishOptions {
        file = project.provider { project(":neoforge").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "[NEOFORGE][${minecraft_version}] ${project.name} ${mod_version}"
        modLoaders.add("neoforge")
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        projectId = "${curseforge_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    def modrinthOptions = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "${modrinth_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    curseforge("curseforgeFabric") {
        from(curseForgeOptions, fabricOptions)
        requires {
            slug = "fabric-api"
        }
        requires {
            slug = "cloth-config"
        }
        requires {
            slug = "architectury-api"
        }
    }

    curseforge("curseforgeForge") {
        from(curseForgeOptions, forgeOptions)
        requires {
            slug = "cloth-config"
        }
        requires {
            slug = "architectury-api"
        }
    }

    curseforge("curseforgeNeoforge") {
        from(curseForgeOptions, neoforgeOptions)
        requires {
            slug = "cloth-config"
        }
        requires {
            slug = "architectury-api"
        }
    }

    if (providers.environmentVariable("MODRINTH_TOKEN").getOrNull() != null) {
        modrinth("modrinthFabric") {
            from(modrinthOptions, fabricOptions)
            requires {
                slug = "fabric-api"
            }
            requires {

                slug = "cloth-config"
            }
            requires {
                slug = "architectury-api"
            }
        }

        modrinth("modrinthForge") {
            from(modrinthOptions, forgeOptions)
            requires {
                slug = "cloth-config"
            }
            requires {
                slug = "architectury-api"
            }
        }

        modrinth("modrinthNeoforge") {
            from(modrinthOptions, neoforgeOptions)
            requires {
                slug = "cloth-config"
            }
            requires {
                slug = "architectury-api"
            }
        }
    }
}
